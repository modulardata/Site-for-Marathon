type: edu
files:
  - name: src/index.html
    visible: true
    text: |-
      <!DOCTYPE html>
      <html lang="us">
          <head>
              <meta charset="utf-8">
              <link rel="stylesheet" href="index.css">
              <title>Hello, World!</title>
          </head>
          <body>
          <div class="iframe-container">
              <iframe
                      class="youtube-iframe"
                      src="https://www.youtube.com/embed/yLGfPNhtS2U?autoplay=1?controls=0"></iframe>
          </div>
          <div class="iframe-container">
              <iframe
                      class="weather-iframe"
                      src="https://www.meteoblue.com/en/weather/widget/daily/london_united-kingdom_2643743?geoloc=fixed&days=7&tempunit=CELSIUS&windunit=MILE_PER_HOUR&precipunit=MILLIMETER&coloured=coloured&pictoicon=0&pictoicon=1&maxtemperature=0&maxtemperature=1&mintemperature=0&mintemperature=1&windspeed=0&windspeed=1&windgust=0&winddirection=0&winddirection=1&uv=0&humidity=0&precipitation=0&precipitation=1&precipitationprobability=0&precipitationprobability=1&spot=0&spot=1&pressure=0&layout=light"  allowtransparency="true" sandbox="allow-same-origin allow-scripts allow-popups allow-popups-to-escape-sandbox"></iframe>
          </div>
          <div class="distance-container">
              <h2>Running Distances</h2>
              <ul>
                  <li class="distance">
                      <h2>1km: Fun Run</h2>
                      <img src="https://c8.alamy.com/comp/2B209JF/frances-michael-dalmeida-rides-the-mens-1km-time-trial-during-day-three-of-the-2020-uci-track-cycling-world-championships-at-velodrom-berlin-2B209JF.jpg" alt="1km race">
                      <p>This short and sweet 1km run is perfect for beginners or those who just want to have a bit of fun. Whether you're looking to kickstart your fitness journey or simply enjoy a leisurely jog in the great outdoors, this distance is a great way to get started.</p>
                  </li>
                  <li class="distance">
                      <h2>5km Run</h2>
                      <img src="https://c8.alamy.com/comp/2B209JF/frances-michael-dalmeida-rides-the-mens-1km-time-trial-during-day-three-of-the-2020-uci-track-cycling-world-championships-at-velodrom-berlin-2B209JF.jpg" alt="5km race">
                      <p>With a distance of 5km, this run is a great challenge for beginner runners or those who want to improve their fitness. Whether you're looking to increase your speed or endurance, this distance will test your limits and help you reach your goals.</p>
                  </li>
                  <li class="distance">
                      <h2>10km Run</h2>
                      <img src="https://c8.alamy.com/comp/2B209JF/frances-michael-dalmeida-rides-the-mens-1km-time-trial-during-day-three-of-the-2020-uci-track-cycling-world-championships-at-velodrom-berlin-2B209JF.jpg" alt="10km run">
                      <p>The 10km run is a great intermediate distance that offers a challenge to runners who have already tackled shorter races. With a mix of speed and endurance, this distance requires a bit more training and dedication, but the sense of accomplishment you'll feel at the finish line will be well worth it.</p>
                  </li>
                  <li class="distance">
                      <h2>Half Marathon</h2>
                      <img src="https://c8.alamy.com/comp/2B209JF/frances-michael-dalmeida-rides-the-mens-1km-time-trial-during-day-three-of-the-2020-uci-track-cycling-world-championships-at-velodrom-berlin-2B209JF.jpg" alt="half marathon">
                      <p>The half marathon is a major milestone for runners and requires dedicated training to complete. At a distance of 21km, this run will push you to your limits both physically and mentally, but the feeling of crossing the finish line is an experience like no other.</p>
                  </li>
                  <li class="distance">
                      <h2>Full Marathon</h2>
                      <img src="https://c8.alamy.com/comp/2B209JF/frances-michael-dalmeida-rides-the-mens-1km-time-trial-during-day-three-of-the-2020-uci-track-cycling-world-championships-at-velodrom-berlin-2B209JF.jpg" alt="full marathon">
                      <p>The full marathon is the ultimate challenge for runners and requires months of intense training to complete. With a distance of 42km, this run is not for the faint of heart, but for those who are willing to put in the time and effort, the feeling of crossing the finish line is a truly unforgettable experience.</p>
                  </li>
              </ul>
          </div>
          </body>
      </html>
    learner_created: false
  - name: src/style.css
    visible: true
    text: |-
      body, iframe {
          margin: 0;
          padding: 0;
      }
      
      .iframe-container {
          width: 100vw;
      }
      
      iframe {
          width: 100%;
      }
      
      .youtube-iframe {
          height: 80vh;
      }
      
      .weather-iframe {
          height: 20vh;
      }
    learner_created: false
  - name: test/test.js
    visible: false
    text: |
      import path from 'path';
      
      const pagePath = path.join(import.meta.url, '../../src/index.html');
      import {StageTest, correct, wrong} from 'hs-test-web';
      
      class Test extends StageTest {
        page = this.getPage(pagePath);
      
        tests = [
          // Test 1 - check iframes still exist
          this.page.execute(() => {
            const youtubeIframe = document.querySelector('.iframe-container iframe[src*="youtube"]');
            const weatherIframe = document.querySelector('.iframe-container iframe[src*="meteoblue"]');
      
            return youtubeIframe && weatherIframe ?
              correct() :
              wrong('The page must have iframes with content from YouTube and the weather widget. Each of these iframes must have a parent div with the class .iframe-container')
          }),
      
          // Test 2 - check that there are no indents
          this.page.execute(() => {
            const youtubeIframe = document.querySelector('.iframe-container iframe[src*="youtube"]');
            const weatherIframe = document.querySelector('.iframe-container iframe[src*="meteoblue"]');
            const bodyStyles = window.getComputedStyle(document.body);
            const youtubeIframeStyles = window.getComputedStyle(youtubeIframe);
            const weatherIframeStyles = window.getComputedStyle(weatherIframe);
      
            return bodyStyles?.margin === '0px' && bodyStyles?.padding === '0px'
            && youtubeIframeStyles?.margin === '0px' && youtubeIframeStyles?.padding === '0px'
            && weatherIframeStyles?.margin === '0px' && weatherIframeStyles?.padding === '0px'?
              correct() :
              wrong('Should remove any margin and padding from the body and iframes');
          }),
      
          // Test 3 - check that iframes have 100% width
          this.page.execute(() => {
            const windowWidth = `${window.innerWidth}px`;
            const iframeContainer = document.getElementsByClassName('iframe-container');
            if (!iframeContainer || iframeContainer.length !== 2) {
              return wrong('Make sure there are still 2 iframe-containers on the page');
            }
            const youtubeIframeContainerStyle = window.getComputedStyle(iframeContainer[0]);
            const weatherIframeContainerStyle = window.getComputedStyle(iframeContainer[1]);
      
            return youtubeIframeContainerStyle.width === windowWidth && weatherIframeContainerStyle.width === windowWidth ?
              correct() :
              wrong('Width of both iframes should be set to 100% of the screen width');
          }),
      
          // Test 4 - check youtube iframe height
          this.page.execute(() => {
            const windowHeight = window.innerHeight;
            const youtubeIframe = document.querySelector('.iframe-container iframe[src*="youtube"]');
            const youtubeIframeHeight = Number(window.getComputedStyle(youtubeIframe).height.replace('px', ''));
      
            return Math.round(((youtubeIframeHeight * 100) / windowHeight)) === 80 ?
              correct() :
              wrong('Be sure the height of the YouTube iframe is 80% of screen height');
          }),
      
          // Test 5 - check youtube controls is hidden
          this.page.execute(async () => {
            const youtubeIframe = document.querySelector('.iframe-container iframe[src*="youtube"]');
      
            return youtubeIframe.src.includes('controls=0') ?
              correct() :
              wrong('Hide the controls for YouTube iframe');
          }),
      
          // Test 6 - check div with the class distance-container
          this.page.execute(async () => {
            const iframeContainers = document.querySelectorAll('.iframe-container');
            const distanceContainer = document.querySelector('.distance-container');
      
            return distanceContainer
            && iframeContainers.length === 2
            && iframeContainers[1].nextElementSibling?.classList.contains('distance-container') ?
              correct() :
              wrong('Should have a div with the class distance-container below the iframes"')
          }),
      
          // Test 7 - check title for distances list
          this.page.execute(async () => {
            const distanceTitle = document.querySelector('.distance-container h2');
            const distanceTitleContent = distanceTitle?.textContent;
      
            return distanceTitleContent === 'Running Distances' ?
              correct() :
              wrong('This component should have a title "Running Distances"')
          }),
      
          // Test 8 - check distances content
          this.page.execute(() => {
            const distanceContainer = document.querySelector('.distance-container');
            const distances = distanceContainer?.querySelectorAll('.distance');
            let count = 0;
      
            for (const distance of distances) {
              const title = distance.querySelector('h2');
              const image = distance.querySelector('img');
              const text = distance.querySelector('p');
              if (title && title?.textContent.length > 0
                && image && image?.getAttribute('src')
                && text && text?.textContent.length > 0
              ) {
                ++count
              }
            }
      
            return count === 5 ?
              correct() :
              wrong('Make sure you add 5 courses and each has a title, image with src, and description')
          }),
      
          // Test 9 - check .video-overlay block
          this.page.execute(async () => {
            const videoOverlay = document.querySelector('.iframe-container iframe[src*="youtube"] + .video-overlay');
      
            return videoOverlay ?
              correct() :
              wrong('Make sure you add a .video-overlay block next to the YouTube iframe');
          }),
      
          // Test 10 - check .video-overlay styles
          this.page.execute(async () => {
            const videoOverlay = document.querySelector('.iframe-container iframe[src*="youtube"] + .video-overlay');
            const styles = videoOverlay && window.getComputedStyle(videoOverlay);
      
            return videoOverlay && styles.position === 'absolute' && styles.backgroundColor === 'rgba(0, 0, 0, 0.5)' ?
              correct() :
              wrong('The .video-overlay block should have absolute positioning and a black background with 50% transparency');
          }),
      
          // Test 11 - check title in .video-overlay block
          this.page.execute(async () => {
            const videoOverlay = document.querySelector('.iframe-container iframe[src*="youtube"] + .video-overlay');
      
            return videoOverlay?.querySelector('h1') ?
              correct() :
              wrong('Make sure you add a header to the first iframe-container');
          }),
      
          // Test 12 - check button in .video-overlay block
          this.page.execute(async () => {
            const videoOverlay = document.querySelector('.iframe-container iframe[src*="youtube"] + .video-overlay');
      
            return videoOverlay?.querySelector('button') ?
              correct() :
              wrong('Make sure you add a button to the first iframe-container');
          }),
      
          // Test 13 - check fonts
          this.page.execute(async () => {
            const body = document.querySelector('body');
            const fontFamily = window.getComputedStyle(body).getPropertyValue('font-family');
            const fonts = fontFamily
              && fontFamily.includes('Roboto')
              && fontFamily.includes('Helvetica Neue')
              && fontFamily.includes('Arial')
              && fontFamily.includes('sans-serif');
      
            return fonts ?
              correct() :
              wrong('Make sure that the body tag is set to all fonts: Roboto, Helvetica Neue, Arial, sans-serif');
          }),
      
          // Test 14 - check video title styles
          this.page.execute(async () => {
            const videoOverlay = document.querySelector('.iframe-container iframe[src*="youtube"] + .video-overlay');
            const videoTitle = videoOverlay?.querySelector('h1');
            const styles = videoTitle && window.getComputedStyle(videoTitle);
      
            return videoTitle && styles.fontSize === '73px' && styles.color === 'rgb(255, 255, 255)' && styles.top === '150px' ?
              correct() :
              wrong('The video block should have a header with a fontSize of 73px, white colour and a top indent of 150px');
          }),
      
          // Test 15 - check video button styles
          this.page.execute(async () => {
            const videoOverlay = document.querySelector('.iframe-container iframe[src*="youtube"] + .video-overlay');
            const videoButton = videoOverlay?.querySelector('button');
            const styles = videoButton && window.getComputedStyle(videoButton);
      
            return videoButton
            && videoButton.innerText === 'Join us!'
            && styles.padding === '5px 10px'
            && styles.border === '2px solid rgb(255, 255, 255)'
            && styles.color === 'rgb(255, 255, 255)'
            && styles.backgroundColor === 'rgba(0, 0, 0, 0)'
            && styles.fontSize === '24px' ?
              correct() :
              wrong('The button should have the following styles: padding 5px 10px, white border (2px), white colour, transparent background, text "Join us!" with font size 24px');
          }),
      
          // Test 16 - check list of distances maximum width and position
          this.page.execute(async () => {
            const distanceContainer = document.querySelector('.distance-container');
            const styles = window.getComputedStyle(distanceContainer);
      
            return distanceContainer && styles.maxWidth === '1000px'
            && styles.marginLeft === styles.marginRight ?
              correct() :
              wrong('Make sure that the list of distances has a maximum width of 1000px and is placed in the middle');
          }),
      
          // Test 17 - check distance list header font size
          this.page.execute(async () => {
            const distanceContainer = document.querySelector('.distance-container');
            const distanceHeader = distanceContainer?.querySelector('h2');
            const styles = window.getComputedStyle(distanceHeader);
      
            return distanceHeader && styles.fontSize === '32px' ?
              correct() :
              wrong('Make sure that the font size of the distance list header is 32px');
          }),
      
          // Test 18 - alternate the image position on every list item
          this.page.execute(async () => {
            const distancesList = document.querySelectorAll('ul li');
            let isAlternate = true;
      
            for (let index = 0; index < distancesList.length && isAlternate; index++) {
              const img = distancesList[index].querySelector('img');
              const styles = img && window.getComputedStyle(img);
              const isEvenItem = index % 2 === 0;
              const isImageOnLeft = styles.float === 'left';
              const isImageOnRight = styles.float === 'right';
      
              isAlternate = (isEvenItem && isImageOnLeft) || (!isEvenItem && isImageOnRight);
            }
      
            return isAlternate ?
              correct() :
              wrong('Make sure that alternate the image position on every list item');
          }),
      
          // Test 19 - check list item styles
          this.page.execute(async () => {
            const distancesList = document.querySelectorAll('ul li');
            let validStyles = true;
      
            for (let index = 0; index < distancesList.length && validStyles; index++) {
              const distance = distancesList[index];
              const styles = distance && window.getComputedStyle(distance);
      
              validStyles = styles.display === 'table' && styles.clear === 'both';
            }
      
            return validStyles ?
              correct() :
              wrong('Ensure that the list items have the properties `display: table` and `clear: both`');
          }),
        ]
      }
      
      it('Test stage', async () => {
          await new Test().runTests()
        }
      ).timeout(30000);
    learner_created: false
feedback_link: https://hyperskill.org/projects/362/stages/2147/implement#comment
status: Solved
record: 3
